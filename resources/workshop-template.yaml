#@ load("@ytt:data", "data")
#@ load("@ytt:base64", "base64")
#@ load("@ytt:json", "json")
---
apiVersion: learningcenter.tanzu.vmware.com/v1beta1
kind: Workshop
metadata:
  name: modern-app-arch-spring-cloud-workshop
spec:
  title: Modern App Architectures with Spring Cloud
  description: A workshop on how to mitigate the challenges of a typical microservices application with the Spring Framework ecosystem
  vendor: tanzu.vmware.com
  difficulty: beginner
  duration: 60m
  url: https://github.com/timosalm/modern-app-arch-spring-cloud-workshop
  content:
    image: #@ "{}".format(data.values.workshop_container_image)
    files: #@ "github.com/{}/modern-app-arch-spring-cloud-workshop?ref={}".format(data.values.workshop_git.username,data.values.workshop_git.branch)
  environment:
    objects:
    - apiVersion: carto.run/v1alpha1
      kind: ClusterSupplyChain
      metadata:
        name: modern-app-arch-supplychain
      spec:
        resources:
        - name: image-builder
          params:
          - name: registry
            value:
              repository: #@ data.values.container_registry.project
              server: #@ data.values.container_registry.hostname
          templateRef:
            kind: ClusterImageTemplate
            name: modern-app-arch-image-template
        - name: deliverable
          params:
          - name: container-port
            default: 8080
          - name: min-scale
            value: 0
          images:
          - name: image
            resource: image-builder
          templateRef:
            kind: ClusterTemplate
            name: modern-app-arch-deliverable-template
        selector:
          app.tanzu.vmware.com/workload-type: modern-app
    - apiVersion: carto.run/v1alpha1
      kind: ClusterImageTemplate
      metadata:
        name: modern-app-arch-image-template
      spec:
        template:
          apiVersion: kpack.io/v1alpha2
          kind: Image
          metadata:
            name: $(workload.metadata.name)$
          spec:
            tag: $(params.registry.server)$/$(params.registry.repository)$
            source:
              git:
                url: $(workload.spec.source.url)$
                revision: $(workload.spec.source.ref.branch)$
            builder:
              kind: ClusterBuilder
              name: default
            build:
              env:
                - name: BP_JVM_VERSION
                  value: "17"
    - apiVersion: carto.run/v1alpha1
      kind: ClusterTemplate
      metadata:
        name: modern-app-arch-deliverable-template
      spec:
        template:
          apiVersion: carto.run/v1alpha1
          kind: Deliverable
          metadata:
            name: $(workload.metadata.name)$
          spec:
            params:
            - name: container-port
              value: $(params.container-port)$
            - name: min-scale
              value: $(params.min-scale)$
            source:
              image: $(image)$
    - apiVersion: carto.run/v1alpha1
      kind: ClusterDelivery
      metadata:
        name: modern-app-arch-delivery
      spec:
        resources:
          - name: deployer
            templateRef:
              kind: ClusterDeploymentTemplate
              name: app-deploy
        selector:
          app.tanzu.vmware.com/deliverable-type: modern-app
    - apiVersion: carto.run/v1alpha1
      kind: ClusterDeploymentTemplate
      metadata:
        name: app-deploy
      spec:
        observedCompletion:
          failed:
            key: .status.conditions[?(@.type=="Ready")].status
            value: "False"
          succeeded:
            key: .status.conditions[?(@.type=="Ready")].status
            value: "True"
        template:
          apiVersion: serving.knative.dev/v1
          kind: Service
          metadata:
            name: $(deliverable.metadata.name)$
          spec:
            template:
              metadata:
                annotations:
                  autoscaling.knative.dev/min-scale:  "$(params.min-scale)$"
              spec:
                containers:
                - name: workload
                  image: $(deliverable.spec.source.image)$
                  ports:
                  - containerPort: $(params.container-port)$
                    protocol: TCP
                  livenessProbe:
                    httpGet:
                      path: /livez
                      port: 8080
                      scheme: HTTP
                  readinessProbe:
                    httpGet:
                      path: /readyz
                      port: 8080
                      scheme: HTTP
                  securityContext:
                    runAsUser: 1000
  session:
    namespaces:
      budget: custom
      role: view
    applications:
      terminal:
        enabled: true
        layout: split
      console:
        enabled: true
      editor:
        enabled: true
    env: 
    - name: TAP_INGRESS
      value: #@ data.values.tap.ingress_domain
    - name: GITEA_BASE_URL
      value: #@ data.values.gitea.base_url
    - name: GITEA_USERNAME
      value: #@ data.values.gitea.basic_auth_username
    - name: GITEA_PASSWORD
      value: #@ data.values.gitea.basic_auth_password
    ingresses:
    - name: twelve-factors
      protocol: https
      host: 12factor.net 
      port: 443
    objects:
    # Permissions for workshop session
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: $(session_namespace)-session
        namespace: $(session_namespace)
      rules:
      - apiGroups: [""]
        resources: [serviceaccounts]
        verbs: [patch]
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: $(session_namespace)-session-rb
        namespace: $(session_namespace)
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: $(session_namespace)-session
      subjects:
        - kind: ServiceAccount
          namespace: $(workshop_namespace)
          name: $(service_account)
    - apiVersion: v1
      kind: Secret
      metadata:
        name: registry-credentials
      type: kubernetes.io/dockerconfigjson
      data:
        #@ docker_creds = {"username": data.values.container_registry.username, "password": data.values.container_registry.password}
        .dockerconfigjson: #@ base64.encode(json.encode({"auths": {data.values.container_registry.hostname: docker_creds}}))
    - apiVersion: carto.run/v1alpha1
      kind: Workload
      metadata:
        labels:
          app.tanzu.vmware.com/workload-type: modern-app
        name: order-service
      spec:
        source:
          git:
            ref:
              branch: $(session_namespace)
            url: #@ data.values.gitea.base_url + '/order-service.git'
    - apiVersion: carto.run/v1alpha1
      kind: Workload
      metadata:
        labels:
          app.tanzu.vmware.com/workload-type: modern-app
        name: product-service
      spec:
        source:
          git:
            ref:
              branch: $(session_namespace)
            url: #@ data.values.gitea.base_url + '/product-service.git'
    - apiVersion: carto.run/v1alpha1
      kind: Workload
      metadata:
        labels:
          app.tanzu.vmware.com/workload-type: modern-app
        name: shipping-service
      spec:
        source:
          git:
            ref:
              branch: $(session_namespace)
            url: #@ data.values.gitea.base_url + '/shipping-service.git'
    - apiVersion: carto.run/v1alpha1
      kind: Workload
      metadata:
        labels:
          app.tanzu.vmware.com/workload-type: modern-app
        name: config-server
      spec:
        params:
        - name: container-port
          value: 8888
        - name: min-scale
          value: 1
        source:
          git:
            ref:
              branch: main
            url: https://github.com/timosalm/modern-app-arch-spring-cloud-workshop.git
            subPath: samples/config-server